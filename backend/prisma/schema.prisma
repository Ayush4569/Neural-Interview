generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
id String @id @default(cuid())
username String  @db.VarChar(15) 
email String @unique
avatarUrl String? 
password String
interviews Interview[]
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
refreshToken String?
}

model Interview {
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId],references: [id])
  startTime DateTime? 
  endTime DateTime? 
  techStack String
  durationMinutes Int 
  expLevel Experience @default(fresher)
  createdAt DateTime @default(now())
  status InterviewStatus @default(scheduled)
  jobTitle String
  additionalPrompt String?
  summary Summary?
  callsession callSession? 

  @@index([userId,status])
}
model callSession {
  id               String              @id @default(cuid())
  interviewId      String              @unique
  interview        Interview           @relation(fields: [interviewId], references: [id])
  
  vapiCallId          String?       @unique
  totalSecondsElapsed Int?  @default(0) 
  lastSeenAt DateTime?

  status           CallSessionStatus   @default(pending)
  startedAt        DateTime?           
  endedAt          DateTime?          
  
  createdAt        DateTime            @default(now())
  expiresAt        DateTime            
  
  @@index([status])
}
model joinToken {
  id String @id
  interviewId String
  userId String
  assistantLock String
  issuedAt DateTime
  expiresAt DateTime

  maxUses Int @default(1)
  consumedCount Int @default(0)
  revoked Boolean @default(false)
  serverNonce String
  firstConsumedCallId  String?

  createdAt DateTime @default(now())

}
model Summary {
  id               String           @id @default(cuid())
  interviewId      String           @unique
  interview        Interview        @relation(fields: [interviewId], references: [id])
  
  overallSummary   String
  strengths        String[]        
  improvements     String[]        
  technicalScore   Int?            
  communicationScore Int?         
  finalAiScore   Int?
  status           SummaryStatus    @default(processing)
  processedAt      DateTime?
  
  createdAt        DateTime         @default(now())
  
  @@index([status])
}
enum Experience {
  fresher
  mid
  lead
  junior
  senior
}
enum InterviewStatus {
  scheduled
  completed
  active
  expired
}
enum CallSessionStatus {
  active
  failed
  pending
  completed
}
enum SummaryStatus {
  processing
  pending
  completed
  failed
}